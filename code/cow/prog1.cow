prog1{
    preamble{ BIG_NOP
        PUSH ZERO
        bind{ common }
        bind{ lfsr  }
        bind{ ascii }
        bind{ rails }
        # ugly code because the assignment keeps changing
        # account for the variable-length header requirement that got added
        layout{
            step    1
            unstep -1
        }
        lock{scope{
            get_encryption_params
            param__MESSAGE_SIZE
            >( MESSAGE_SIZE )
            get( SEED )
            get( TAP  )
            get( HEADER_LENGTH )
            scope{
                use_ascii
                rebase{ 0 }
                layout{
                    steps   0
                }
                put( steps )
                get( steps )
                scope{
                    param__TOTAL_PAD_LENGTH
                    set{ step TOTAL_PAD_LENGTH }
                }
                SUB
                get( step  )
                put( steps )
                set{ step SP }
                [
                    PUSH
                    > PUSH PUSH > POP < < POP
                    > POP
                    DEC
                ]
                rebase{ 0 }
                param__FINAL_OFFSET
                scope{
                    set{
                        steps   FINAL_OFFSET
                    }
                }
                put( 1 )
                get( 1 )
                ADD
                get( 1 )
                put( 0 )
                sub(steps, 2)
                mkrail( step, steps )
                put( 0 ) get( 0 )
                > ZERO <
                SUB
                +(FINAL_OFFSET)
                ADD
                swap(0,1)
                inc( 1 )
                transport_up(step, -1, 0)
                rail_up(step)
                rebase{ 0 }
                scope{
                    layout{
                        msg_start  +1
                        header      0
                        tap        -1
                        seed       -2
                    }
                    put( header     )
                    put( tap        )
                    put( seed       )
                    put( msg_start  )
                    get( seed       )
                    get( tap        )
                    get( header     )
                    goto{ header }
                    ZERO +
                    copy( header, seed )
                    copy( header, tap  )
                    -
                }
                rail_down(step)
            }
        }}
        rail_up( step )
        param__MESSAGE_START
        > rebase{ MESSAGE_START }
        goto{ 0 }
        ZERO
        rmrail( step )
        use_ascii
        lfsr_advance_layout
        set{
            data    SP #ascii space
        }

        goto{ start }
        encrypt_header_layout
        put( count )
        copy( count, header_size )
        put( tap  )
        put( seed )
        call{ setup }
    }
    depends{
        bvm
        common
        bitwise
        lfsr
        ascii
        rails
    }
    namespace{
        setup{
            scope{
                encrypt_header_layout
                get( seed )
            }
            lock{scope{
                op_layout
                rebase{ op2 }
                layout{ curr curr }
                goto{ start }
                put( op1 )
                scope{ use_ascii set{op2 SP} }
                apply_bitwise( logical_xor )
                get( op1 )
                goto{ curr }
            }}
            scope{
                lfsr_advance_layout
                put( data )
            }
            ZERO PUSH
            call{ encrypt_header }
            # call{ lfsr run_in_place }
        }
        encrypt_header{
            uncall_half
            scope{
                lfsr_advance_layout
                use_ascii
                get( data )
                set{
                    data SP
                }
            }
            encrypt_header_layout
            get(header_size)
            < prep_uncall >
            call{ encrypt_message }
            goto{ count }
            DEC
            PUSH
            [
                POP
                >>>
                uncall POP
                <
                prep_uncall
                call{ encrypt_header }
                call{ lfsr run_in_place }
                <<                
                PUSH ZERO
            ]
            POP
            goto{ start }
        }
        encrypt_message{
            uncall_half
            scope{
                lfsr_advance_layout
                get( seed )
                get( tap  )
            }
            rebase{ 0 }
            scope{
                param__MESSAGE_START
                goto{ MESSAGE_START }
            }
            lfsr_advance_layout
            rebase{ data }
            goto{ start }
            put( tap  )
            put( seed )
            
            prep_uncall
            call{ encrypt_looper }
            call{ lfsr run }
        }
        encrypt_looper{
            scope{
                lfsr_encrypt_return_layout
                rebase{ start }
                goto{ data }
                < ZERO PUSH >
                PUSH < POP > POP
                goto{ start }
                <
                rebase{ 0 }
            }
            lfsr_advance_layout
            rebase{ start }
            uncall_half
            prep_uncall 
            call{ encrypt_done }
            goto{ data }
            PUSH
            lock{[
                POP
                goto{ start }
                uncall
                prep_uncall
                call{ encrypt_looper }
                call{ lfsr run }
                goto{ data }
                PUSH
                ZERO
            ]}
            POP
            goto{ start }
        }
        encrypt_done{
            uncall_half
            lfsr_encrypt_return_layout
            goto{ data }
            rebase{ 0 }
            param__FINAL_OFFSET
            layout{ counter +1 }
            goto{ counter }
            put( counter ) # put the header size on the counter
            get( counter ) # keep the counter on the stack
            SUB
            scope{set{
                counter    FINAL_OFFSET
            }}
            ADD
            swap(counter, 2)
            goto{ 0 }
            memshiftu( 4, counter )
            >(3)
            
            # dump the stack (message prefix)
            rebase{ 0 }
            layout{ header_size 0 }
            put( header_size )        # unstack the header size
            ddump( header_size )
            
            ZERO PUSH PUSH # we're done, push a bunch of zeros to exit gracefully
        }
        panic{
            EXIT
        }
    }
    bindings{
        get_encryption_params{
            layout{
                SEED            43
                TAP             42
                HEADER_LENGTH   41
            }
        }
        param__TOTAL_PAD_LENGTH{
            value{ TOTAL_PAD_LENGTH 23 }
        }
        param__FINAL_OFFSET{
            value{ FINAL_OFFSET     64 }
        }
        param__HEADER_LENGTH{ @ pure
            value{ HEADER_LENGTH 16 }
        }
        param__MESSAGE_START{ @ pure
            layout{ MESSAGE_START 16 }
        }
        param__MESSAGE_SIZE{
            value{ MESSAGE_SIZE 41 }
        }
        encrypt_header_layout{
            lfsr_advance_layout
            layout{
                count           4
                header_size    -4
            }
        }
    }
    postamble{
        bind{ wipe to
            PUSH < POP
        }
        wipe(63)
    }
}