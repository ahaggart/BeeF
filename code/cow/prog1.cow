prog1{
    preamble{
        > EXIT_STACK
        lock{scope{
            get_encryption_params
            param__MESSAGE_SIZE
            param__HEADER_LENGTH
            goto{ MESSAGE_SIZE }
            get( SEED )
            get( TAP  )
            lock{scope{
                rebase{ 0 }
                layout{
                    counter     1
                }
                memshiftu( HEADER_LENGTH, counter )
                rebase{ counter }
                goto{ 0 }
                < (HEADER_LENGTH)
            }}
            goto{ 0 }
        }}
        rebase{ 0 }
        bind{ lfsr  }
        bind{ ascii }
        get_encryption_params
        use_ascii
        lfsr_advance_layout
        set{
            # seed    SEED
            # tap     TAP
            data    SP #ascii space
        put( tap  )
        put( seed )

        goto{ start }
        call{ setup }
    }
    depends{
        common
        lfsr
        ascii
    }
    namespace{
        setup{
            encrypt_header_layout
            param__HEADER_LENGTH

            set{ count HEADER_LENGTH }
            ZERO PUSH
            call{ encrypt_header }
            call{ lfsr run_in_place }
        }
        encrypt_header{
            uncall_half
            scope{
                lfsr_advance_layout
                use_ascii
                get( data )
                set{
                    data SP
                }
            }
            encrypt_header_layout
            < prep_uncall >
            call{ encrypt_message }
            goto{ count }
            DEC
            PUSH
            [
                POP
                >>>
                uncall
                <
                prep_uncall
                call{ encrypt_header }
                call{ lfsr run_in_place }
                <<                
                PUSH ZERO
            ]
            POP
            goto{ start }
        }
        encrypt_message{
            uncall_half
            scope{
                lfsr_advance_layout
                get( seed )
                get( tap  )
            }
            < rebase{ 0 }
            scope{
                param__MESSAGE_START
                goto{ MESSAGE_START }
            }
            lfsr_advance_layout
            rebase{ data }
            goto{ start }
            put( tap  )
            put( seed )
            
            prep_uncall
            call{ encrypt_looper }
            call{ lfsr run }
        }
        encrypt_looper{
            scope{
                lfsr_encrypt_return_layout
                rebase{ start }
                goto{ data }
                < ZERO PUSH >
                PUSH < POP > POP
                goto{ start }
                <
                rebase{ 0 }
            }
            lfsr_advance_layout
            rebase{ start }
            uncall_half
            prep_uncall 
            call{ encrypt_done }
            goto{ data }
            PUSH
            lock{[
                POP
                goto{ start }
                uncall
                prep_uncall
                call{ encrypt_looper }
                call{ lfsr run }
                goto{ data }
                PUSH
                ZERO
            ]}
            POP
            goto{ start }
        }
        encrypt_done{
            uncall_half
            lfsr_encrypt_return_layout
            goto{ data }
            rebase{ 0 }
            param__MESSAGE_SIZE
            layout{ counter +1 }
            debug{ MESSAGE_SIZE value }
            set{
                counter    MESSAGE_SIZE
            }
            memshiftu( 4, counter )
            >(3)

            # dump the stack (message prefix)
            dumps( 12 )
            
            EXIT # done!
        }
    }
    bindings{
        get_encryption_params{
            layout{
                SEED    43
                TAP     42
            }
            # value{ SEED 13 }
            # value{ TAP 250 }
        }
        param__HEADER_LENGTH{ @ pure
            value{ HEADER_LENGTH 16 }
        }
        param__MESSAGE_START{ @ pure
            layout{ MESSAGE_START 16 }
        }
        param__MESSAGE_SIZE{
            value{ MESSAGE_SIZE 41 }
        }
        encrypt_header_layout{
            lfsr_advance_layout
            layout{
                count   4
            }
        }
    }
    postamble{

    }
}