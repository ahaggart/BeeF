stack{
    depends{
        common
    }
    namespace{

    }
    bindings{
        stack_layout{ @ pure
            layout{
                stack  -2
                start   0
            }
        }
        stack_push(layout data,layout step,text put_fn){ @ locked, scoped
            get( data )
            stack_top(step)
            + lock{ put_fn }
            stack_return( step )
        }
        stack_pop(layout step,text get_fn){ @ locked, scoped
            stack_top(step)
            down( step )
            - lock{ get_fn }
            down( step )
            stack_return( step )
        }
        stack_top(layout step){ @ scoped 
            stack_layout
            rebase{ start }
            ZERO
            goto{ stack }
            [
                up( step )
            ]
            rebase{ 0 }
        }
        stack_return(layout step){ @ scoped
            [
                down( step )
            ]
        }
    }
}