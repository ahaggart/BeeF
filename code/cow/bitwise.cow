bitwise{
    preamble{
        >
        EXIT_STACK
        rebase{0}
        op_layout
        set{
            op1     197
            op2     79

            { 5}    127
        }
        call{ xor }
    }
    depends{ common }
    namespace{
        xor{
            get_op_width
            save( 1 WIDTH )
            double_expand( 3 )
            unary_expander(8 3 2)
            double_apply( pair_xor 3)
            binary_compacter( 3 )
            restore( 1 WIDTH )
        }
    }
    bindings{
        op_layout{
            layout{
                start   0
                op1     0
                op2     1
            }
        }
        binary_expander(value width){
            [- >(width) < >(width) [ >(width) ] ++ [- <(width) ] <(width) >]
        }
        binary_compacter(value width){
            # bind{common}
            > >(width) -[- >(width) ] <(width) # go to end of expansion
            [>[- <(width) ++ >(width) ] <(width) <]
            get( 1 )
            <(width) <
            POP
        }
        double_expand(value width){
            op_layout
            goto{ op1 }
            binary_expander( width )
            goto{ op2 }
            binary_expander( width )
            goto{ start }
        }
        double_apply(text fn, value width){
            > >(width) [ >(width) ]  <(width) # go to end byte (unary expander)
            [
                rebase{0}
                lock{
                    > fn <                    # apply the function to bit pair
                }
                <(width)                      # move to next pair                      
            ]
            <   # return to start
        }
        unary_expander(value count,value width, value mul){
            # BREAK
            set{ 
                { 0} count 
                {+1} 0
            }
            goto{ 0 }
            [ > >(width) [ >(width) ] +(mul) [ <(width) ] <-]
        }
        pair_xor{
            [>-<-]>[ < PUSH +> POP ]<
        }
        get_op_width{
            value{ WIDTH 26 }
        }

    }
    postamble{

    }
}