bitwise{
    preamble{
        # test comment
        >
        EXIT_STACK
        rebase{ 0 }
        op_layout
        set{
            op1     197
            op2     79

            { 5}    127
        }
        goto{ start }
        call{ xor }
    }
    depends{ 
        bvm     # processor-specific info
        common
    }
    namespace{
        LSL{
            op_layout
            get( op2 )
            set{ op2 0 }
            [->++<]
            swap( op1, op2 )
            put( op2 )
        }
        xor{
            apply_bitwise( logical_xor )
        }
        or{
            apply_bitwise( logical_or )
        }
        and{
            apply_bitwise( logical_and )
        }
        u_xor{
            u_op_layout
            get_param__U_SCRATCH_SIZE

            save_wipe( scratch_start, U_SCRATCH_SIZE, 0 )
            dense_binary_expander
            worm( 1, 8, 0, logical_xor )
            restore( scratch_start, U_SCRATCH_SIZE )
        }
    }
    bindings{
        op_layout{ # memory footprint for bitwise ops
            layout{
                start           0   # data head starts here
                op1             0   # operand 1 (not preserved)
                op2             1   # operand 2 (preserved)
                scratch_start   2   # scratch space (preserved)
            }
        }
        u_op_layout{ # memory footprint for bitwise ops
            layout{
                start           0   # data head starts here
                op              0   # operand 1 (not preserved)
                scratch_start   1   # scratch space (preserved)
            }
        }
        apply_bitwise(text logical_op){ @ locked
            get_processor_info

            # configure the scope for bitwise operations
            op_layout          
            get_param__SCRATCH_SIZE
            value{ THREE_WIDE 3 }
            
            get( op2 )
            # push scratch space to stack and wipe it
            save_wipe( scratch_start, SCRATCH_SIZE, 0 )
            double_expand( THREE_WIDE )
            unary_expander(NUM_BITS, THREE_WIDE, 2) # place 2's to ease traversal
            double_apply( logical_op, THREE_WIDE )
            binary_compacter( THREE_WIDE )
            restore( scratch_start, SCRATCH_SIZE )
            put( op2 )
        }
        dense_binary_expander{ @ locked
            [->> [>] ++ [-<] <]
        }
        binary_expander(value width){ @ locked
            # >(width) <    ::    >(width-1)
            [- >(width) < >(width) [ >(width) ] ++ [- <(width) ] <(width) >]
        }
        binary_compacter(value width){ @ locked
            > >(width) -[- >(width) ] <(width) # go to end of expansion
            [>[- <(width) ++ >(width) ] <(width) <]
            > PUSH <
            <(width) <
            POP
        }
        double_expand(value width){ @ locked, scoped
            op_layout
            goto{ op1 }
            binary_expander( width )
            goto{ op2 }
            binary_expander( width )
            goto{ start }
        }
        double_apply(text fn, value width){ @ locked
            > >(width) [ >(width) ]  <(width) # go to end byte (unary expander)
            [
                lock{scope{                   # protect our namespace
                    > fn <                    # apply the function to bit pair
                }}
                <(width)                      # move to next pair                      
            ]
            <   # return to start
        }
        unary_expander(value count,value width, value mul){
            set{ 
                { 0} count 
                {+1} 0
            }
            goto{ 0 }
            lock{
                [ > >(width) [ >(width) ] +(mul) [ <(width) ] <-]
            }
        }
        logical_xor{
            SUB test_and_set
        }
        logical_or{
            ADD test_and_set
        }
        logical_and{
            PUSH [ POP > PUSH < ZERO ] POP
        }
        get_param__SCRATCH_SIZE{
            # convention?: get_param__ prefix for single-value binding exports
            value{ SCRATCH_SIZE 30 }
        }
        get_param__U_SCRATCH_SIZE{
            value{ U_SCRATCH_SIZE 9 }
        }
        test_and_set{
            >[< PUSH +> POP ]<
        }
    }
    postamble{

    }
}
