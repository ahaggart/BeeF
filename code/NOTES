################################################################################
DEPRECATED 5/17/18 ---> see README in the lang directory
NOTES ON COMPILER/EMULATOR
################################################################################
ISSUES
* namespaces with nested namespaces of the same name produce errors
    * occurred when importing module bitwise into namespace bitwise
* function bodies without dependencies in importing namespaces case KeyError?
* invalid inline closure detection doesnt always work
    * "cal{fn}" causes a KeyError in the _NAME_ tag
* using a non-imported module doesn't cause a compile error, results in a
    broken function call (-1 remains set as call fid) at runtime
    * likely caused by not cleansing the module imports before processing 
        other nested namespaces
* empty function calls cause an index out of bounds error at compile time

PLANNED FEATURES
* better parsing? needs some research on compiler parse strategy
    * this should be done before adding more features to the hacky compiler
        we have now
* prettier code generation
    * is this even worthwhile? no one wants to look at .beef files anyway
    * need a strategy for grouping things into lines, etc
        * source mapping? VM directives might get in the way if we try to simply
            place assembly on the line corresponding to the line that
            generated it
            * add a directive to ignore directives in line count
* new inline closure types (planned):
    * rebase: inform the compiler that the current location of the data head
        should be treated as the basis for relative positioning code
        * functions rebase to the current data head location on entry
        * compiler will attempt to track relative position, but will give up
            when it encounters a "[" or a "]"
            * will follow trivial loops if they contain balanced "<" and ">"
    * assert: assert on some condition, error on violation
        * value: assert on the value in some location
            * enables compiler to optimize under this assumption, 
                * example: when zeroing cells to make function calls,
                    compiler can fetch an asserted zero instead of using "[-]"
            * can specify a range or set of values
        * stack: assert on the top value of the stack
            * also enables some compiler optimizations
        *** need to finish implementing VM locks for these to work
        *** position assertions don't really make sense, just rebase
        *** assertions may be unused if the location they assert on is not
             visited
    * goto: resposition the data head to the given relative location
        * clearer, more concise COW files, less prone to error than manually 
            writing ">" and "<" to reposition the data head
        * accepts relative location or layout names as destination
    * set: set the value of a cell
        * by default, will zero then increment cell to value
        * nearby assertions will be considered as "shortcuts" to value
    * layout: assign names to relative locations in the current coordinate base
        * inner text is a whitespace delimited list of position-name pairs
        * reserved names carry special meaning
            * free: unused memory location, allow compiler to optimize around
        * bindings which contain layout information allow modules to export 
            formatting information for their function calls
    * stable/static/atomic: marks a code block as not changing the data head
        position, allowing for additional implicit position tracking
        * wraps code block in data head position assertions to enforce property
        * creates a local positioning scope that is applied only to interior
            * initial state is copied from containing scope
            * rebases will not affect the containing scope on exit
            * layout information will not pollute containing scope
    * load: push a values to stack from a range of relative cell locations
    * unload: write values from stack to a range of relative cell locations
    * panic: abort the VM and print a custom message
* backtracking: debug mode allows stepping forward AND backward
    * all instructions expect stack ops and branching are easy to backtrack through
    * use a "popped" stack to restore backtracked POP instructions
* modifier system (parenthetical expressions): "apply" some expression to 
    a token by following it with a parenthesized expression
    * by default, application will duplicate the token, and thus only
        accepts numerical input
    * bindings can define custom modifier behavior by adding a parenthesized
        expression between the name and the curly braces: binding(expr){tokens}
        * any occurence of "expr" in binding text is resolved at compile time,
            substituting "expr" with the expression supplied in the binding
            invocation
            * this allows binding subexpressions to be selectively duplicated,
                as in: [ <(expr) + >(expr) ], to provide a generalized form for
                expressions which may have different uses for different values
                of "expr"
* parameter system: module-wide global parameters
    * work in same fashion as bindings, but allow for arbitary text

OPTIMIZATION
* compiler currently does none
* easy:
    * eliminate pairs of instructions that have no effect
        * "<>" and "><"
        * "^_"
        * "+-" and "-+"

################################################################################
NOTES ON CODING STYLE
################################################################################

* rails: working with variable-sized data structures if often best achieved 
    using "rails", which are dead memory areas filled with 1's, bounded on both 
    sides by a zero. These regions can be traversed by a simple [>], so code can
    be written to traverse by regions instead of by individual cell.
    * rail creation: rails can be created by hand if their length is known at 
        compile time, or they can be generated by a rail-laying function, which
        carries a counter with it that allows rail length to be a value in
        memory. Rails can also be laid until some memory condition is satisfied,
        such as encountering a nonzero cell. Rails can be a useful data processing
        tool, allowing programs to process input in memory byte-by-byte by 
        laying rails as data is consumed
    * rail traversal: rails are extremely easy to traverse (as long as you only 
        go end-to-end) using [>] or [<], which allows functions to compactly
        reposition to other memory locations without expensive recursive
        travelling functions or hardcoded values.
    * data: data can be used as rails if it is known to be nonzero. Otherwise, a 
        data rail should be used, which makes use of alternating 1's with data.
        Data rails can be traversed with [>>], and can store arbitrary 
        data. 
        * transferring data by rail can be done by stack internally, but should
            be loaded in other ways externally to prevent interference with
            nested call IDs on the stack.
        * exposed functions that transfer data by rail should push data from
            memory, using any scheme suitable for the rail size used
    * functions: recursive functions can make use of rails since they are a
        known value, allowing them to safely and atomically traverse rails. This
        can be used to operate on railed data without needing to account for
        the data clobbering that traveller functions do. One application of this
        is the use of a traveller function to segment existing rails, allowing
        for abstractions such as "memory allocation" by cutting new regions into
        an existing rail line.

* memory manager: using rails, we can implement a memory management system with
   rich features such as indexing, and allocation
    * create: create a memory management instance at the current location.
        Requires a moderate amount of free memory, can be passed arguments
        specifying how large the initial memory should be and how it should be
        created
        * unless module import reorganization is implemented, any module using
            the memory manager will have a copy of core mm functions.
            * focus on making mm modular and lightweight, so only the base 
                module needs to import heavier components
            * use request-based system to allow non-base modules to import
                minimal code, base module is responsible for invoking
                memory management routines regularly
    * allocate: segments the memory management rail, creating a free space 
        of the specified size. Updates the manager's memory table to reflect
        the allocation. Returns to the caller's memory index, and writes the
        memory index of the allocated zone to the caller's arg section
        * allocated memory has a number of sections:
            * before and after the allocation are data rails which help direct
                memory traversals over the region, contiaining information such
                as the zone ID and size
            * at the low memory index of the allocated region is the messaging
                space, which is where memory calls should originate and where
                function call arguments should be placed
    * free: removes an entry from the reserved memory table. The manager will
        not wipe or remove memory that is free'd unless it is needed by another
        allocation.
        * optimize for traversal time?
    * goto: use the memory manager to relocate the data head to another zone.
        The caller should load the stack with a reciever function that will
        be passed control after the goto routine completes. The goto routine
        will complete in the messaging section of the given zone, unless
        an error occurred and the request could not be completed
        * cautious memory traversal: 
            * initiated by user-generated memory traversal calls, uses zone 
                annotations to traverse towards manager zone with request data
            * chainer-style function, runs until it reaches the manager zone
                then dumps request data
        * quick memory traversal:
            * initiated by the memory manager, does not use zone annotations
            * manager can preload call stack using information from the memory
                table, allowing it to avoid using chainer functions

* namespace hiding: functions written in COW must often modify the stack and 
    otherwise alter normal program flow in order to achieve the desired result.
    One side effect of this is functions which must be called in a specific
    order, as they rely on non-standard stack behavior executed in related code.
    These non-atomic functions should not be exposed in the base namespace.
    Multi-part function executions should be hidden in nested namespaces and 
    called upon by functions in the base namespace, which allows modules to 
    make use of non-atomic behavior without exposing non-atomic components to
    importing modules.
    * An example of this behavior can be found below, in which a self-calling
        function crams data onto the stack. Importing modules should not have to
        wrangle this behavior directly. Instead, a caller function is exposed in 
        the base namespace, which creates a workspace for the recursor. The 
        function performing most of the work is hidden, along with its cleanup 
        routine, in a nested namespace, preventing calling modules from directly
        accessing sensitive functions.


Apply function to specified number of adjacent cells
* self-calling function that carries a loop condition along with it 
* hides data underneath the call stack
* cleanup function writes results back to cells

loopTemplate{           # recursive "for" loop -> apply fn to adjacent cells
    # we expect the loop counter to be in the cell we start in
    > ATOMIC_OP PACK        # do some atomic evaluation, cram result onto stack
    < rcopy                 # copy counter into cell we extracted
    -^[                     # call the next block if counter is nonzero
        _                   # unpack
        call{loopTemplate}  # overwrites old counter
        ^[-]                # (exit)
    ]_                      # unpack counter into current cell
    PUSH NOT [              # run this loop if the counter is zero
        POP                 # pop the zero -> overwrite entry condition
        call{loopCleaner}   # run the cleanup function
        PUSH                # replace the zero
    ] POP                   # restore the value we NOTed
}

loopCleaner{
    rUNPACK(8)
}

binding rUNPACK { < UNPACK  }
binding PACK    {   PUSH    }

Conditional Function calls
* take different execution paths depending on memory conditions

call{ zero_result_fn }
[
    POP
    call{ nonzero_result_fn }
    ZERO
]

################################################################################
NOTES ON TASKS
################################################################################
* recursive encryption loop:
    * counter, seed, tap
    * values on stack
    * counter on stack
1. counter in free space, decrement
2. 
                  v
| -3 | -2 | -1 | +0 | +1 | +2 |
 FREE FREE  CC  SEED NEXT
