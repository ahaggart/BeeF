lfsr_decrypt{
    preamble{
        # remove_prefix call makes this program Problem3-compliant
        call{remove_prefix}
        call{start_decryption}
    }
    depends{
        code/bitwise.cow
        code/lfsr_encrypt.cow
    }
    namespace{
        start_decryption{
            >(63)
            call{find_seed}
        }
        remove_prefix{
            PUSH
            <<[<]< 
            <(63)               # return to c0
            POP >               # c0 = 0, move to c1
            [> cmp ]            # overwrite prefix with 1's

            <[<] PUSH > POP +   # set c1 = 1

            rail_shifter        # position the message
                                
            <<<[<]<<[<]>        # navigate to the message fragment 
            
            wipe_string         # wipe the fragment
        }
        find_seed{
            call{decrypt seed_finder}
            call{setup_workspace}
            call{setup_possible_taps}
        }
        setup_possible_taps{
            <(3)                # free space
            # [178, 180, 184, 198, 212, 225, 243, 250]

            # create the base char we are expecting
            +(32) PUSH <(7) POP  # ascii space

            # place all possible taps in memory
            # TODO: more compact constant building
            +(146)  PUSH < POP              # 178
            +(2)    PUSH < POP              # 180
            +(4)    PUSH < POP              # 184
            +(14)   PUSH < POP              # 198
            +(14)   PUSH < POP              # 212
            +(13)   PUSH < POP              # 225
            +(18)   PUSH < POP              # 243
            +(7)                            # 250

            # @ -17
            # prep a stack for storing processed bytes
            # use 01...10 pattern as boundary
            < ZERO PUSH < POP PUSH < POP PUSH + < POP
            >>>>

            >(7) >(10)               # return to +0
        }
        setup_workspace{
            < ZERO PUSH < POP
            <(2)                # move the decryption start
        }
        decrypt imports bitwise lfsr_encrypt binds lfsr_encrypt{
            get_next{
                ZERO            # zero the start cell, just in case
                >>>[>]          # step over old value in +1
                > PUSH          # push next value to stack
                < PUSH + > POP  # nonzero the old end, zero the new one
                <[<]<< POP      # place the value into position
                
                # place the value on the mem stack for later
                byte_stack_push
            }
            seed_finder{
                call{main}
                call{return_to_result}
                call{store_initial_result}
                call{bitwise xor}
                call{get_next}
            }
            store_initial_result{
                byte_stack_push               # store this for later
                PUSH PUSH << POP << POP       # move result into -2
            }
            return_to_result{
                < ZERO PUSH >>>>> POP
            }
            main{
                call{check_taps}
                call{store_result}
                call{bitwise xor}
                call{get_next}
            }
            store_result{
                <<<<
            }
            check_taps{
                # assume we have done one round, call for a transition
                call{tap_check_transition}
                << PUSH >>> POP
                [                           # check if there are taps to get
                    POP                     # throw away the function call
                    <                       # reposition for safe call
                    call{compare_result}
                    call{lfsr_encrypt step_lfsr}
                    call{get_tap}
                    < ZERO PUSH >> POP
                ] <
            }
            get_tap{
                < ZERO    <             # skip over empty cells
                [<]                     # move to last tap in sequence
                > PUSH                  # grab last tap
                < PUSH > POP            # mark tap as "taken"
                >[>]                    # return to first zeroed
                >> POP <                # place the tap we are checking
            }
            compare_result{
                compare4
                call{discard_tap}
                [   # this is a known value, we can safely overwrite
                    POP      # pop the old call ids, use our own
                    call{keep_tap}
                    ZERO
                ]
            }
            discard_tap{ # tap failed to predict, use another
                <<                  # taps begin at -2
                [<]                 # find where we took the tap from
                < shift_list        # shift the list to keep it together
                # extend the margin
                << PUSH > POP >
                >[>]>[>]>           # exit point
                >> PUSH << POP      # grab another copy of the seed to work with
                call{check_taps} 
                
            }
            keep_tap{ # found the tap the use
                >> PUSH << POP      # grab another copy of the seed
                > PUSH <            # grab the tap
                <<                  # taps begin at -2
                [<]                 # find where we took the tap from
                <                   # offset the tap by one
                POP
                >>[>]>              # return to start
                call{check_taps}
            }
            tap_check_transition{
                call{ no_tap_panic }# this should not get called
                <<<                 # check for additional taps
                [                   # more taps, need another cycle
                                    # assume this is the last one
                    >>> POP call{ start_decryption_loop } <<<
                    <[              # check for even more taps
                        >>>
                        POP         # discard the function calls, we arent ready
                        > call{ main }
                        < ZERO <        # reposition the list
                        shift_list  >[>]
                        PUSH >(5)       # fetch the current seed, set as "old"
                        PUSH PUSH << POP << POP
                        >>>> POP        # main expects us to start here
                    ]
                ]
            }
            start_decryption_loop{
                # tap is in +1
                > PUSH
                >(7)
                
                call{ rebuild_message }
            }
            rebuild_message{
                >>>             # check if there are still placeholders
                [<<<
                    byte_stack_pop
                    replace_byte
                >>>]
                <<< byte_stack_pop_destroy  # clean everything up
                PUSH >(3) POP < PUSH PUSH < POP < POP >> 
                POP <                   # pop the tap into memory
                call{finish_decrypt}
                PUSH(2)                 # push some zeros to exit nested call
                +(63) PUSH > PUSH       # push counter then tap
                << PUSH PUSH > POP > POP    # clean up
                > call{ decrypt_message }   # rebase to +1
            }
            decrypt_message{
                call{lfsr_encrypt encrypt_external}
            }
            finish_decrypt{
                <(125)      # return to c1
                
                fill_to_nonzero
                call{grab16}
                call{grab16}
                call{grab16}
                call{grab16}
            }
            grab16{
                < ZERO + >          # fill in the gap potentially left by caller
                ^>(16) < ZERO + PUSH -  # grab 16 cells, adjust zeroed endpoint
                <[ POP PUSH <] POP      # write 1s until we hit a zero
                >(15) _<(15) _ >(16) ZERO # write grabbed cells and endpoint
                > [>] >                 # return to next set of data
            }
            no_tap_panic{ # bad news bears
                EXIT
            }
            exit_fn{
                EXIT
            }
        }
    }
    bindings{
        compare4{
            >(4) PUSH <(4) [- >(4)  - <(4) ] +      # subtract op1 from op2
            >(4) [ <(4)- >(4) ZERO ] POP <(4)       # nonzero means not equal

            # 1 if equal, 0 otherwise
        }
        shift_list{ # starting at a zeroed entry, shift the rest of the list
            < [[ PUSH > POP <<] PUSH > POP < ] >
        }
        byte_stack_push{
            PUSH <(6) [<] << [<] << [<<] + < POP >  [>>] >> [>] >> [>] >(5)
        }
        byte_stack_pop{
            <(7) [<] << [<] << [<<] >
                PUSH < PUSH > POP PUSH > POP
            >> [>>] >> [>] >> [>] >(6) POP
        }
        replace_byte{
            PUSH >>> [>] POP < ZERO < [<] <<
        }
        byte_stack_pop_destroy{
            <(7) [<] << [<] << [<<] >
                PUSH < PUSH > POP PUSH PUSH > POP
            _^>_^> [_^>_^>] _^>_^> [_^>] _^>(2) [_^>] _^>(6) POP POP
        }
        fill_to_nonzero{
            +[ PUSH > [< POP - PUSH ] POP ] >
        }
        cmp{ # compare two numbers, 1 if equal
            > PUSH <[->-<]>[<-> ZERO ]<+> POP <
        }
        rail_shifter{
            # slide message along rail of 1's until we hit a null terminator
            [[>] PUSH > PUSH PUSH < PUSH > POP < POP [<] POP > POP > ]
        }
        wipe_string{
            # write 0s until we hit a null terminator
            # requires: ZERO in -1
            [<^>_>]
        }
    }
    postamble{

    }
}