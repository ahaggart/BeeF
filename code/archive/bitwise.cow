bitwise{ 
    preamble{ 

    }
    namespace{
        expand{
            [> >[>]++[-<]<-]
        }
        expand2{ # triples at +6, uses 31 cells
            < ZERO
            # use a triple expander gadget to make navigating easier, end at +3
            - expander3
            > expander3
            > expander3
            <
        }
        double_expand{ # uses 18 cells of workspace
            # destructively clear out the workspace
            < ZERO PUSH >>> wipe(18) <(18) POP <<
              expander2
            > expander2
            <
        }
        xor{ # atomic, right-only, args in +0 and +1
            prep_expand

            call{inner xor}
            call{double_expand}
        }
        or{ # args in +0 and +1 
            prep_expand

            call{inner or}
            call{double_expand}
        }
        and{ # args in +0 and +1
            prep_expand

            call{inner and}
            call{double_expand}
        }
        rol{
            < PUSH > > PUSH > PUSH > PUSH ZERO PUSH(3)
            < POP < POP < < POP >
            [>++[>>]<[>+>]<<-]
            > PUSH < POP > > > POP < POP < POP < < POP >
        }
        inner{
            xor{
                >>>> # move to start of bit pairs
                bit_xor(8)
                finish_expand
            }
            and{
                >>>> # move to start of bit pairs
                bit_and(8)
                finish_expand
            }
            or{
                >>>> # move to start of bit pairs
                bit_or(8)
                finish_expand
            }
            compact_xor{ # uses expand2
                # now start evaluating logical XORs per-pair
                >>> >>
                #[<]> # this doesnt seem to do anything
                [
                    [   
                        > SUB > # subtract expanded pair
                        [<<<<<<+>>>>>>[-]]> # zero a digit if diff=/=0
                    ]
                    + # kickstart the compressor loop
                    [<[<<<++>>>-]<<] # start compressing bits
                    >>
                ]
                <<< PUSH < POP # copy the result to cell 1
                < POP # discard the null fid
                
                > >(29)
                lrestore(29)
                < PUSH  # put the null fid back
                >
            }
            compact_or{ #uses expand2
                # now start evaluating logical ORs per-pair
                >>> >>
                [
                    [   
                        > ADD > # add expanded pair
                        [<<<<<<+>>>>>>[-]]> # zero a digit if diff=/=0
                    ]
                    + # kickstart the compressor loop
                    [<[<<<++>>>-]<<] # start compressing bits
                    >>
                ]
                <<< PUSH < POP # copy the result to cell 1
                < POP # discard the null fid
                
                > >(29)
                lrestore(29)
                < PUSH  # put the null fid back
                >
            }
        }
    }
    bindings{
        rsave{
            PUSH >
        }
        rrestore{
            POP >
        }
        lrestore{
            POP <
        }
        wipe{
            _^>
        }
        prep_expand{
            > rsave(19) <(19) < # save the workspace used by double_expand  
        }
        finish_expand{
            <                       # end of last pair
            <<                      # last pair result
            compacter2(7)           # LSB does not need compacting
            PUSH <<< POP            # place the result in +0
            < POP                   # pop the null fid
            > >(19) lrestore(19)    # restore saved cells
            < PUSH >
        }
        expander2{
            [>> >>[>>]++[-<<]<<-]
        }
        expander3{
            [>>> >>>[>>>]++[-<<<]<<<-]
        }
        compacter2{
            [-<<++>>]<<
        }
        bit_xor{ # XOR two cells, place the result in -1
            [->-<]>[ << + >> ZERO ]>
        }
        bit_or{ # XOR two cells, place the result in -1
            [->+<]>[ << + >> ZERO ]>
        }
        bit_and{ # AND two cells, place the result in -1
            [>[ << + >>-]<-]>[-]>
        }
    }
    postamble{

    }
}