# deprecated because the assignment changed, we can completely reuse other file
__lfsr_decrypt_offset{
    preamble{
        call{start_decryption}
    }
    depends{
        code/bitwise.cow
        code/ds.cow
        code/lfsr_encrypt.cow
    }
    namespace{
        start_decryption{
            >>
            call{decrypt begin_attempt}
            call{init workspace}
        }
        init imports ds{
            workspace{
                # data reference starts at -16 from message
                # [178, 180, 184, 198, 212, 225, 243, 250]

                # create the base char we are expecting
                +(32)   # ascii space
                PUSH

                call{ message }
                call{ ds slider_traverse_up }

                # call this fn 8 times to position data
                < ZERO +(8)
                [ call{ ds slider_shift_low } -]
                >

                # place all possible taps in memory
                # use a slider data structure to non-destructively "pop" items
                # TODO: more compact constant building
                # use the stack to queue slider insertions before it exists

                +(146)  PUSH  
                call{ ds slider_insert_low }
                +(2)    PUSH
                call{ ds slider_insert_low }
                +(4)    PUSH
                call{ ds slider_insert_low }
                +(14)   PUSH
                call{ ds slider_insert_low }
                +(14)   PUSH
                call{ ds slider_insert_low }
                +(13)   PUSH
                call{ ds slider_insert_low }
                +(18)   PUSH
                call{ ds slider_insert_low }
                +(7)    PUSH
                call{ ds slider_insert_low }
                > PUSH < POP +(9)       # guaranteed space for 8 items
                call{ ds create_slider }
            }
            message{
                # at high rail head of tap slider
                # we dont have enough room for another slider, but we can
                # guarantee that the message cache is nonzero data only
                >+ >>       # offset by three
                POP         # ascii SPACE
                # build the first few chars of the message to work with
                PUSH > POP +(45)            # ascii 'M'
                PUSH > POP +(37)            # ascii 'r'
                << PUSH PUSH >>> POP +(14)  # ascii '.'
                > POP                       # ascii SPACE
                <<< PUSH >>>> POP +(10)     # ascii 'W'
                >> +                        # stack bottom marker
                
                # set up a rail to the message start 
                >(6) +(9)
                [ PUSH > PUSH < POP +> POP -]
                <[<]
            }
        }

        decrypt imports ds bitwise lfsr_encrypt binds bitwise{
            begin_attempt{
                call{ initial_fetch }
            }

            initial_fetch{
                >[>]> PUSH PUSH     # grab the next value
                < PUSH > POP <+[<]  # return to start
                POP                 # place the value
                <<

                call{ initial_transition }
                call{ bitwise xor }
                call{ initial_message_start }
                call{ get_message_start }
            }

            fetch_next_byte{    # fetch a byte from the encrypted message
                # start configuration
                #    +0     +1     +2     +3
                # | SEED | TAP  | DEST | RAIL |  

                >>>[>]> PUSH PUSH   # grab the next value
                < PUSH > POP <+[<]  # return to start
                POP                 # place the value
                <<                  # safe location to return

                call{ encrypt_and_check }
                call{ lfsr_encrypt step_lfsr}

                # final configuration
                #    +0     +1     +2
                # | SEED | TAP  | BYTE |
            }

            get_message_start{
                # start configuration
                #    +0     +1     +2
                # | BYTE | SEED | TAP  |
                <<<                 # go to message cache
                <<[<]>              # end of stack
                PUSH                # peek the top byte
                [>]>                # message cache start
                POP                 # place the retrieved value
            }

            initial_message_start{
                PUSH > PUSH < POP +
                >>>> POP
            }

            initial_transition{
                < ZERO PUSH >> POP          # clear out the initial byte
                < PUSH < PUSH > POP < POP   # move the seed to seed position
                <

                call{ fetch_next_byte }
                call{ fetch_tap }
            }

            fetch_tap{
                << <<[<]<[<]>

                call{ return_tap }
                call{ ds slider_shift_high }
                call{ ds slider_peek_high }
            }

            return_tap{
                PUSH < PUSH > POP +         # reset the slider rail head
                [>]>[>]> >>>
                > POP <                     # place tap in tap location
            }

            encrypt_and_check{
                # start configuration
                #    +0     +1     +2
                # | SEED | TAP  | BYTE |

                # swap the byte and the lfsr
                > PUSH > PUSH < POP > POP <<

                # swap seed and byte
                PUSH > PUSH < POP > POP <

                call{ try_second_byte }         # fallback call for comp fail
                call{ analyze_result }
                call{ compare_message_start }
                call{ get_message_start }
                call{ bitwise xor}

                # final configuration
                #    +0     +1     +2
                # | BYTE | SEED | TAP  |
            }

            compare_message_start{
                PUSH > PUSH < POP +         # reset stack bottom to 1
                >> POP                      # place byte for comparison
                > PUSH <                    # save op2
                SUB >[< PUSH ->  POP ] <+   # comparison
                > POP <                     # replace compared byte     
            }

            analyze_result{
                [
                    POP                     # pop the fallback call
                    call{ check_next_byte }
                    ZERO
                ]
            }

            analyze_second_try{ # is this enough criteria to pass the tap?
                # TODO: special case for M as starting char
                [
                    POP                     # pop the fallback call
                    call{ use_tap }
                    ZERO
                ]
            }

            try_second_byte{
                <<<<[<]>> PUSH [>]>         # fetch the second byte from top
                POP                         # place the byte
                
                call{ try_next_tap }        # fallback call for comp fail
                call{ analyze_second_try }
                call{ compare_message_start }
            }

            check_next_byte{
                # start configuration
                #    +0     +1     +2     +3
                # | ZERO | DECR | SEED | TAP |   

                PUSH >> PUSH > PUSH < POP < POP >> POP <<
                call{ fetch_next_byte }

                # start configuration
                # DEST = ZERO, since it is adjacent to a rail line
                #    +0     +1     +2     +3
                # | SEED | TAP  | DEST | RAIL |  
            }

            try_next_tap{
                # start position is also fetch tap position
                PUSH >>> POP        # zero the cell adjacent to rail
                >[>]                # start of untouched data
                POP [< POP ] PUSH   # restore all the message bytes
                <[<]                # return to rail head
                                    # begin an attempt with new tap
                call{ begin_attempt }
            }

            use_tap{
                # start position is also fetch tap position
                >>> PUSH <<<< POP >
                PUSH >>> POP        # zero the cell adjacent to rail
                >[>]                # start of untouched data
                POP [< POP ] PUSH   # restore all the message bytes
                <[<]                # return to rail head
                                    # begin decryption with tap
                # reposition for decryption stuff
                <<<< PUSH > PUSH < POP >>> POP <
                >>>[>]> PUSH < PUSH > POP < +[<]< < POP

                call{ decrypt_message }
                call{ extract_seed }
                call{ get_message_start }
            }

            extract_seed{
                PUSH > PUSH < POP + >> POP
                # swap byte and seed, since we know value
                PUSH > PUSH < POP > POP <

                call{ lfsr_encrypt step_lfsr}
                call{ extraction_transition }
                call{ bitwise xor }

            }

            extraction_transition{
                > PUSH > PUSH < POP > POP <<
            }

            decrypt_message{
                # set up for encryption function call
                # target config:
                #    +0     +1
                # | VAL  | SEED |
                # stack: ... COUNT TAP    

                PUSH
                >>>>[>] > PUSH < POP > POP
                << ZERO PUSH < POP          # zero the rail
                PUSH PUSH
                +(62) PUSH                  # encryption counter
                [<]<< PUSH >>>[>]>          # grab the tap
                
                # ready
                call{lfsr_encrypt encrypt_external}

            }

            use_seed{
                < ZERO >
                <<< [<] << [<] > PUSH [>] >> [>] >> # fetch a tap
                
                PUSH >>>>> [>] >        
                push_to_stack           # this value is assumed, push it through

                < POP > POP <           # advance the lfsr 

                call{ prep_encrypt }
                call{ lfsr_encrypt step_lfsr }
                
            }

            prep_encrypt{
                < ZERO >
                > PUSH < PUSH > POP             # grab the tap
                << PUSH + > POP >>
                
                push_to_stack
                
                > PUSH << POP > PUSH > POP << PUSH > POP
                
                call{ bitwise xor }             # encryption step
                
            }

            exit_fn{
                EXIT
            }
        }
    }
    bindings{
        push_to_stack{
            PUSH <<< [<] POP > ZERO > [>] >
        }
        go_to_template{
            << [<] < [<] <(6)
        }
        back_from_template{
            >(6) > [>] > [>] >
        }
        compare{
            > PUSH <[->-<]+>[<-> ZERO ] POP <
        }
    }
    postamble{
        
    }
}